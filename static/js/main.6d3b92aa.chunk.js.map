{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","analytics","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","random2","words","word","Math","floor","random","length","console","log","Random","ChatRoom","times","useState","setTimes","useEffect","collection","onSnapshot","snapshot","newTimes","docs","map","doc","id","data","JSON","stringify","useTimes","dummy","useRef","messagesRef","query","orderBy","limit","useCollectionData","idField","formValue","setFormValue","palEspanol","setpalEspanol","sendMessage","e","a","preventDefault","uid","photoURL","add","text","espanol","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","msg","ChatMessage","key","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6d3b92aa.chunk.js","sourcesContent":["import React, { useRef, useState,useEffect } from 'react';\r\nimport './App.css';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyBxJqf5SH_1hp-quzE8lVjTyryWY7Q2AXs\",\r\n  authDomain: \"piedrapapeltijera-cc32a.firebaseapp.com\",\r\n  databaseURL: \"https://piedrapapeltijera-cc32a.firebaseio.com\",\r\n  projectId: \"piedrapapeltijera-cc32a\",\r\n  storageBucket: \"piedrapapeltijera-cc32a.appspot.com\",\r\n  messagingSenderId: \"583053769337\",\r\n  appId: \"1:583053769337:web:e61abcc981cc7025c332a8\"})\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\nconst analytics = firebase.analytics();\r\n\r\nfunction useTimes(){\r\n  const[times,setTimes]= useState([])\r\n\r\n\r\nuseEffect(()=>{\r\n  firebase\r\n  .firestore()\r\n  .collection('messages')\r\n  .onSnapshot((snapshot)=>{\r\n    const newTimes =snapshot.docs.map((doc)=> ({\r\n      id:doc.id,\r\n      ...doc.data()\r\n    }))\r\n    setTimes(newTimes)\r\n  })\r\n},[])\r\nconsole.log(JSON.stringify(times));\r\nreturn times\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>‚öõÔ∏èüî•üí¨</h1>\r\n        <SignOut />\r\n        <Random />\r\n\r\n      </header>\r\n\r\n      <section>\r\n        {user ? <ChatRoom /> : <SignIn />}\r\n      </section>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SignIn() {\r\n\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Ingresar</button>\r\n      <p>Home</p>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nfunction SignOut() {\r\n  return auth.currentUser && (\r\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\r\n  )\r\n}\r\n\r\nfunction random2(){\r\n  var words = [\"monitor\", \"program\", \"application\", \"keyboard\", \"javascript\", \"gaming\", \"network\"];\r\n\r\n  var word = words[Math.floor(Math.random() * words.length)];\r\n\r\n \r\n  \r\n  console.log(word);  \r\n  }\r\n\r\nfunction Random() {\r\n  return auth.currentUser && (\r\n    <button className=\"random\" onClick={() => random2()}>Random</button>\r\n  )\r\n}\r\n\r\nfunction abc(){\r\n  alert(\"hola\")\r\n}\r\n\r\n\r\nfunction ChatRoom() {\r\n  const times= useTimes();\r\n  const dummy = useRef();\r\n  const messagesRef = firestore.collection('messages');\r\n  const query = messagesRef.orderBy('createdAt').limit(25);\r\n\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n                     \r\n  const [formValue, setFormValue] = useState('');\r\n  const [palEspanol, setpalEspanol] = useState('');\r\n  const [arrayNuevo,setArrayNuevo] = useState();\r\n\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL } = auth.currentUser;\r\n    await messagesRef.add({\r\n      text: formValue,\r\n      espanol: palEspanol,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL\r\n    })\r\n    \r\n    setFormValue('');\r\n    setpalEspanol('')\r\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    //messages.map(msg =>{ a.push(msg)})\r\n\r\n  }\r\n\r\n  return (<>\r\n    <main>\r\n\r\n       {times && times.map(msg => <ChatMessage key={msg.id} message={msg} />)} \r\n\r\n      <span ref={dummy}></span>\r\n\r\n    </main>\r\n\r\n    <form onSubmit={sendMessage}>\r\n\r\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Ingles\" />\r\n      <input value={palEspanol} onChange={(e) => setpalEspanol(e.target.value)} placeholder=\"Espa√±ol\" />\r\n\r\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\r\n      <button type=\"submit\" onChange={(e) => random2()} >Random</button>\r\n\r\n    </form>\r\n  </>)\r\n}\r\n\r\n\r\nfunction ChatMessage(props) {\r\n  const { text, uid, photoURL } = props.message;\r\n\r\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  return (<>\r\n    <div className={`message ${messageClass}`}>\r\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\r\n      <p>{text}</p>\r\n    </div>\r\n  </>)\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}